
@page "/login"
@using Sny.Api.Dtos.Models.Accounts
@using Sny.Web.Components
@using Sny.Web.Services.UserContext
@using Services.BackendProvider
@inject NavigationManager NavManager
@inject IBackendProvider _backendProvider
@inject IUserContext UserContext
@inject HttpClient Http

<Header Title="Login"></Header>

<div class="login-panel">

    <p class="login-title">Prosím, přihlašte se</p>
    <div class="login-form">
        <div>
          <p>Email:</p>
          <TextInput Type="text" @bind-Value="Email"></TextInput>
        </div>
        <div>
          <p>Heslo:</p>
            <TextInput Type="password" @bind-Value="Password"></TextInput>
        </div>
        <Button OnClick="() => TryLogin()" Style="secondary" Text="Přihlásit se"></Button>
        @if (LoginErrorMessage is not null) {
            <p class="msg msg-error">
                @LoginErrorMessage
            </p>
        }
    </div>
</div>


@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "Jwt")]
    public string? Jwt { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "logout")]
    public bool? Logout { get; set; }

    private string Email { get; set; } = default!;

    private string Password { get; set; } = default!;

    private string? LoginErrorMessage { get; set; } = default!;

    private async Task TryLogin()
    {
        LoginRequestDto loginDto = new LoginRequestDto(Email, Password);
        var response = await Http.PostAsJsonAsync<LoginRequestDto>(_backendProvider.GetUri("account/login"), loginDto);

        if (!response.IsSuccessStatusCode) 
        {
            Password = string.Empty;
            LoginErrorMessage = "Nepodařilo se přihlásit.";
            return;
        }

        var responseObject = await response.Content.ReadFromJsonAsync<LoginResponseDto>();
        if (responseObject == null) throw new ApplicationException("Response is null");

        await UserContext.Login(responseObject.Jwt);

        NavManager.NavigateTo(ReturnUrl ?? "/");
    }

    protected override async Task OnInitializedAsync()
    {
        if (Logout.HasValue && Logout == true) 
        {
            await UserContext.Logout();
            NavManager.NavigateTo("/");
            return;
        }

        if (Jwt != null ) 
        {
            await UserContext.Login(Jwt);
            NavManager.NavigateTo("/");
        }
        else
        {
            await UserContext.Logout();
            this.StateHasChanged();
        }
    }
}
