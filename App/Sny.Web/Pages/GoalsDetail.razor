@page "/goals/{Id:guid}"
@using Sny.Api.Dtos.Models.Goals
@using Sny.Web.Components
@using Sny.Web.Model
@using Sny.Web.Services.BackendProvider
@using static Sny.Api.Dtos.Models.Tasks.Tasks
@inject NavigationManager _navManager
@inject HttpClient Http
@inject IBackendProvider _backendProvider


<PageTitle>Detail cíle</PageTitle>
<Header Title="Detail cíle"></Header>


<div class="content">
    @if (_goal is null || _tasks is null) 
    {
        <Loading></Loading>
    }
    else 
    {
        <p><b>Info o cíli:</b></p>

        <TextInput Placeholder="Název" Value="@_goal.Name" OnChange="(value) => UpdateName(value)"></TextInput>
        <TextAreaInput Value="@_goal.Description" OnChange="(value) => UpdateDescription(value)"></TextAreaInput>
       

        <div class="d-flex taskHeader">
          <div><b>Úkoly</b></div> <Button Text="Přidat" Style="highlight" OnClick="AddTask"></Button>
        </div>
        <div class="gridEditTask">
            @foreach (var a in _tasks)
            {
                <div><TaskStateCheckbox Value="a.IsCompleted" OnClick="async () => await ChangeTaskComplete(a)"></TaskStateCheckbox></div>
                <div> 
                    <DateInput Value="a.DueDate" OnChange="(value) => UpdateTaskDate(a, value)"></DateInput>
                </div>
                <div><TextInput Placeholder="Název úkolu" Value="@a.Name" OnChange="(value) => UpdateName(a, value)"></TextInput></div>
                <div><a @onclick="async () => await DeleteTask(a)"><RemoveBin></RemoveBin></a></div>
            }
        </div>

    }
</div>

<Footer Buttons="FooterButtons()"></Footer>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GoalDto? _goal;

    private List<TaskDto>? _tasks;

    private IEnumerable<HeaderButton> FooterButtons()
    {
        yield return new HeaderButton("Zpět na Cíle", () => _navManager.NavigateTo("/goals"));
    }

    protected override async Task OnInitializedAsync()
    {
        var goalTask = Http.GetFromJsonAsync<GoalDto>(_backendProvider.GetUri($"goals/{Id}"));
        var taskTask = Http.GetFromJsonAsync<TaskDto[]>(_backendProvider.GetUri($"tasks/byGoal/{Id}"));

        _goal = await goalTask;
        _tasks = (await taskTask)?.ToList();
    }

    private async Task ChangeTaskComplete(TaskDto task) {
        if (_tasks == null) return;

        var updatedTask = task with { IsCompleted = !task.IsCompleted };
        int index = _tasks.FindIndex(d => d.Id == updatedTask.Id);
        _tasks[index] = updatedTask;

        var goalTask = await Http.PostAsync(_backendProvider.GetUri($"tasks/{task.Id}/complete/{updatedTask.IsCompleted}"), null);
    }

    private async Task UpdateTask(TaskDto updatedTask)
    {
        if (_tasks == null) return;

        int index = _tasks.FindIndex(d => d.Id == updatedTask.Id);
        _tasks[index] = updatedTask;

        EditRequestTaskDto editTask = new EditRequestTaskDto(updatedTask.Id, updatedTask.Name, updatedTask.Description, updatedTask.DueDate, updatedTask.IsCompleted, updatedTask.GoalId);
        var response = await Http.PutAsJsonAsync<EditRequestTaskDto>(_backendProvider.GetUri($"tasks/{updatedTask.Id}"), editTask);
        var responseObject = await response.Content.ReadFromJsonAsync<EditResponseTaskDto>();
        if (responseObject == null) throw new ApplicationException("Response is null");
    }

    private async Task AddTask() {
        if (_tasks == null) return;

        AddRequestTaskDto addTask = new AddRequestTaskDto(string.Empty, string.Empty, null, false, Id);
        var response = await Http.PostAsJsonAsync<AddRequestTaskDto>(_backendProvider.GetUri("tasks"), addTask);
        var responseObject = await response.Content.ReadFromJsonAsync<AddResponseTaskDto>();
        if (responseObject == null) throw new ApplicationException("Response is null");

        _tasks.Add(new TaskDto(responseObject.Id,
            responseObject.Name, 
            responseObject.Description,
            responseObject.DueDate,
            responseObject.IsCompleted,
            Id));

        if (_tasks == null) return;
    }

    private async Task DeleteTask(TaskDto task)
    {
        if (_tasks == null) return;

        int index = _tasks.FindIndex(d => d.Id == task.Id);
        _tasks.RemoveAt(index);

        var goalTask = await Http.DeleteAsync(_backendProvider.GetUri($"tasks/{task.Id}"));
    }

    private async Task UpdateName(string value)
    {
        _goal = _goal! with { Name = value};
        await OnChange();
    }

    private async Task UpdateDescription(string value)
    {
        _goal = _goal! with { Description = value};
        await OnChange();
    }

    private async Task UpdateActive(bool value)
    {
        _goal = _goal! with { Active = value};
        await OnChange();
    }

    private async Task UpdateTaskDate(TaskDto task, DateTime? value)
    {
        task = task with { DueDate = value };
        await UpdateTask(task);
    }

    private async Task UpdateName(TaskDto task, string value)
    {
        task = task with { Name = value };
        await UpdateTask(task);
    }

    private async Task OnChange()
    {
        if (_goal == null) return;

        EditRequestGoalDto addGoal = new EditRequestGoalDto(_goal.Id, _goal.Name, _goal.Active, _goal.Description);
        var response = await Http.PutAsJsonAsync<EditRequestGoalDto>(_backendProvider.GetUri($"goals/{Id}"), addGoal);
        var responseObject = await response.Content.ReadFromJsonAsync<EditResponseTaskDto>();
        if (responseObject == null) throw new ApplicationException("Response is null");
    }

 
}