@page "/goals/{Id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Sny.Api.Dtos.Models.Goals
@using Sny.Web.Components
@using Sny.Web.Model
@using Sny.Web.Services.BackendProvider
@using static Sny.Api.Dtos.Models.Tasks.Tasks
@inject NavigationManager _navManager
@inject IBackendProvider _backendProvider
@attribute [Authorize]

<PageTitle>Detail cíle</PageTitle>
<Header Title="@_title"></Header>

<div class="content">
    @if (_goal is null || _tasks is null)
    {
        <Loading></Loading>
    }
    else 
    {
        <p>
            <b>Info o cíli:</b>
        </p>

        <TextInput OnInput="(val) => _title = val" Placeholder="Název" Value="@_goal.Name" ValueChanged="(value) => UpdateGoal(_goal with { Name = value })"></TextInput>
        <TextAreaInput Value="@_goal.Description" OnChange="(value) => UpdateGoal(_goal with { Description = value })"></TextAreaInput>

        <div class="d-flex taskHeader">
          <div><b>Úkoly</b></div> <Button Text="Přidat" Style="highlight" OnClick="AddTask"></Button>
        </div>
        <div class="gridEditTask">
            @foreach (var a in _tasks)
            {
                <div>
                    <TaskStateCheckbox Value="a.IsCompleted" OnClick="async () => await ChangeTaskComplete(a)"></TaskStateCheckbox>
                </div>
                <div>
                    <DateInput Value="a.DueDate" OnChange="(value) => UpdateTask(a with { DueDate = value })"></DateInput>
                </div>
                <div>
                    <TextInput Placeholder="Název úkolu" Value="@a.Name" ValueChanged="(value) => UpdateTask(a with { Name = value })"></TextInput>
                </div>
                <div>
                    <a @onclick="async () => await DeleteTask(a)"><RemoveBin></RemoveBin></a>
                </div>
            }
        </div>

    }
</div>


@if (!_isLoading)
{
    <Footer Buttons="FooterButtons()"></Footer>
}


@code {
    [Parameter]
    public Guid Id { get; set; }

    private bool _isLoading => _goal is null || _tasks is null;

    private GoalDto? _goal;

    private List<TaskDto>? _tasks;

    private string _title = "Detail cíle";

    private IEnumerable<HeaderButton> FooterButtons()
    {
        yield return new HeaderButton("Zpět na Cíle", () => _navManager.NavigateTo("/goals"));
    }

    protected override async Task OnInitializedAsync()
    {
        var goalTask = _backendProvider.GetGoal(Id);
        var taskTask = _backendProvider.GetTasksByGoalId(Id);

        _goal = (await goalTask).ThrowWhenUnsuccessful().Data;
        _title = _goal.Name;
        _tasks = (await taskTask).ThrowWhenUnsuccessful().Data.ToList();
    }

    private async Task ChangeTaskComplete(TaskDto task) 
    {
        if (_tasks == null) return;

        var updatedTask = task with { IsCompleted = !task.IsCompleted };
        int index = _tasks.FindIndex(d => d.Id == updatedTask.Id);
        _tasks[index] = updatedTask;

        (await _backendProvider.SetTaskComplete(task.Id, updatedTask.IsCompleted)).ThrowWhenUnsuccessful();
    }

    private async Task UpdateTask(TaskDto updatedTask)
    {
        if (_tasks == null) return;

        int index = _tasks.FindIndex(d => d.Id == updatedTask.Id);
        _tasks[index] = updatedTask;

        EditRequestTaskDto editTask = new EditRequestTaskDto(updatedTask.Id,
            updatedTask.Name,
            updatedTask.Description,
            updatedTask.DueDate, 
            updatedTask.IsCompleted,
            updatedTask.GoalId);

        (await _backendProvider.UpdateTask(editTask)).ThrowWhenUnsuccessful();
    }

    private async Task AddTask() {
        if (_tasks == null) return;

        AddRequestTaskDto addTask = new AddRequestTaskDto(string.Empty, string.Empty, null, false, Id);
        var responseObject = (await _backendProvider.AddTask(addTask)).ThrowWhenUnsuccessful().Data;

        _tasks.Add(new TaskDto(responseObject.Id,
            responseObject.Name, 
            responseObject.Description,
            responseObject.DueDate,
            responseObject.IsCompleted,
            Id));
    }

    private async Task DeleteTask(TaskDto task)
    {
        if (_tasks == null) return;

        int index = _tasks.FindIndex(d => d.Id == task.Id);
        _tasks.RemoveAt(index);

        (await _backendProvider.DeleteTask(task.Id)).ThrowWhenUnsuccessful();
    }

    private async Task UpdateGoal(GoalDto goal)
    {
        _goal = goal;

        EditRequestGoalDto addGoal = new EditRequestGoalDto(_goal.Id, _goal.Name, _goal.Active, _goal.Description);
        (await _backendProvider.UpdateGoal(addGoal)).ThrowWhenUnsuccessful();
    }
}